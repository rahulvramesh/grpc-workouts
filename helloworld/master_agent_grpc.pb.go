// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: helloworld/master_agent.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterAgentClient is the client API for MasterAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterAgentClient interface {
	RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*AgentInfo, error)
	SendRAMUsage(ctx context.Context, in *SystemInfo, opts ...grpc.CallOption) (*SystemInfo, error)
}

type masterAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterAgentClient(cc grpc.ClientConnInterface) MasterAgentClient {
	return &masterAgentClient{cc}
}

func (c *masterAgentClient) RegisterAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, "/helloworld.MasterAgent/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterAgentClient) SendRAMUsage(ctx context.Context, in *SystemInfo, opts ...grpc.CallOption) (*SystemInfo, error) {
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, "/helloworld.MasterAgent/SendRAMUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterAgentServer is the server API for MasterAgent service.
// All implementations must embed UnimplementedMasterAgentServer
// for forward compatibility
type MasterAgentServer interface {
	RegisterAgent(context.Context, *AgentInfo) (*AgentInfo, error)
	SendRAMUsage(context.Context, *SystemInfo) (*SystemInfo, error)
	mustEmbedUnimplementedMasterAgentServer()
}

// UnimplementedMasterAgentServer must be embedded to have forward compatible implementations.
type UnimplementedMasterAgentServer struct {
}

func (UnimplementedMasterAgentServer) RegisterAgent(context.Context, *AgentInfo) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedMasterAgentServer) SendRAMUsage(context.Context, *SystemInfo) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRAMUsage not implemented")
}
func (UnimplementedMasterAgentServer) mustEmbedUnimplementedMasterAgentServer() {}

// UnsafeMasterAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterAgentServer will
// result in compilation errors.
type UnsafeMasterAgentServer interface {
	mustEmbedUnimplementedMasterAgentServer()
}

func RegisterMasterAgentServer(s grpc.ServiceRegistrar, srv MasterAgentServer) {
	s.RegisterService(&MasterAgent_ServiceDesc, srv)
}

func _MasterAgent_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterAgentServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.MasterAgent/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterAgentServer).RegisterAgent(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterAgent_SendRAMUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterAgentServer).SendRAMUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.MasterAgent/SendRAMUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterAgentServer).SendRAMUsage(ctx, req.(*SystemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterAgent_ServiceDesc is the grpc.ServiceDesc for MasterAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.MasterAgent",
	HandlerType: (*MasterAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _MasterAgent_RegisterAgent_Handler,
		},
		{
			MethodName: "SendRAMUsage",
			Handler:    _MasterAgent_SendRAMUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/master_agent.proto",
}
